<div class="demo-landing-page">
  <!-- Hero Section -->
  <header class="hero-section bg-gradient-to-r from-blue-600 to-purple-600 text-white">
    <div class="container mx-auto px-4 py-16 text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-6">
        ü§ñ Experience AI Marketing in Action
      </h1>
      <p class="text-xl md:text-2xl mb-8">
        Interactive demos showcasing real AI workflows that power modern marketing campaigns
      </p>
      <div class="flex flex-wrap justify-center gap-4 mb-8">
        <span class="bg-white/20 px-4 py-2 rounded-full text-sm">
          8 Interactive Workflows
        </span>
        <span class="bg-white/20 px-4 py-2 rounded-full text-sm">
          Real AI Demonstrations  
        </span>
        <span class="bg-white/20 px-4 py-2 rounded-full text-sm">
          3-6 Minutes Each
        </span>
      </div>
    </div>
  </header>

  <!-- Workflow Selection Grid -->
  <section class="workflow-selection py-16 bg-gray-50">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl font-bold text-center mb-12 text-gray-800">
        Choose Your AI Journey
      </h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
        <% @workflows.each do |workflow_key, config| %>
          <div class="workflow-card bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 relative overflow-hidden border border-gray-100" 
               data-workflow="<%= workflow_key %>">
            
            <!-- Card Header -->
            <div class="card-header p-6 text-center border-b bg-gradient-to-br from-gray-50 to-gray-100">
              <div class="text-4xl mb-4"><%= config[:icon] %></div>
              <h3 class="text-lg font-semibold text-gray-800 mb-2">
                <%= config[:title] %>
              </h3>
              <p class="text-sm text-gray-600 leading-relaxed">
                <%= config[:description] %>
              </p>
            </div>
            
            <!-- Card Meta -->
            <div class="card-meta p-4">
              <div class="flex justify-between items-center mb-4">
                <span class="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full font-medium">
                  ‚è± <%= config[:duration] %>
                </span>
                <span class="text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full font-medium">
                  <%= config[:difficulty] %>
                </span>
              </div>
              
              <!-- Tags -->
              <div class="flex flex-wrap gap-1 mb-4">
                <% config[:tags].each do |tag| %>
                  <span class="text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded">
                    #<%= tag %>
                  </span>
                <% end %>
              </div>
              
              <!-- CTA Button -->
              <button class="start-demo-btn w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold py-3 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105"
                      data-workflow="<%= workflow_key %>">
                ‚ñ∂ Start Interactive Demo
              </button>
            </div>
            
            <!-- Preview Overlay (Hidden by default) -->
            <div class="preview-overlay absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300 rounded-xl hidden">
              <div class="text-center text-white p-4">
                <div class="w-16 h-12 bg-gray-200 rounded mb-4 mx-auto flex items-center justify-center">
                  <span class="text-gray-600 text-xs">Preview</span>
                </div>
                <p class="text-sm">Click to start this workflow demo</p>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </section>

  <!-- Quick Start Options -->
  <section class="quick-start py-12 bg-white">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-2xl font-bold mb-8 text-gray-800">üöÄ Quick Start Options</h2>
      
      <div class="flex flex-col md:flex-row justify-center gap-6">
        <button data-action="random-tour"
                class="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors transform hover:scale-105">
          üé≤ Surprise Me! (Random Demo)
        </button>
        
        <button data-action="guided-path"
                class="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors transform hover:scale-105">
          üó∫ Guided Tour (All Features)
        </button>
        
        <button data-action="developer-demo"
                class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors transform hover:scale-105">
          üë©‚Äçüíª Developer Walkthrough
        </button>
        
        <button data-action="debug-info"
                class="bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors transform hover:scale-105">
          üîç Debug Info
        </button>
      </div>
    </div>
  </section>

  <!-- Demo Anchor Point (hidden, used for intro.js tours) -->
  <div id="demo-anchor" class="hidden"></div>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 hidden">
    <div class="text-center text-white">
      <div class="loading-spinner w-12 h-12 border-4 border-white border-opacity-30 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
      <p class="text-lg">Loading AI Demo...</p>
    </div>
  </div>
</div>

<!-- Include Intro.js CSS and JS with nonce -->
<%= stylesheet_link_tag "https://cdn.jsdelivr.net/npm/intro.js@7.2.0/intro.min.css", nonce: true %>
<%= javascript_include_tag "https://cdn.jsdelivr.net/npm/intro.js@7.2.0/intro.min.js", nonce: true %>

<!-- Demo Controller JavaScript -->
<script nonce="<%= content_security_policy_nonce %>">
  
  class DemoController {
    constructor() {
      console.log('DemoController constructor called');
      console.log('Workflows data:', <%= raw @workflows.to_json %>);
      
      this.workflows = <%= raw @workflows.to_json %>;
      this.currentTour = null;
      this.setupCardInteractions();
      
      console.log('DemoController constructor completed');
    }
    
    setupCardInteractions() {
      // Hover preview effects for workflow cards
      document.querySelectorAll('.workflow-card').forEach(card => {
        card.addEventListener('mouseenter', (e) => {
          this.showPreview(e.currentTarget);
        });
        
        card.addEventListener('mouseleave', (e) => {
          this.hidePreview(e.currentTarget);
        });
      });
      
      // Demo button click handlers
      document.querySelectorAll('.start-demo-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const workflowKey = e.currentTarget.getAttribute('data-workflow');
          if (workflowKey) {
            this.startTour(workflowKey);
          }
        });
      });
      
      // Quick start button handlers
      document.querySelectorAll('[data-action]').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const action = e.currentTarget.getAttribute('data-action');
          switch (action) {
            case 'random-tour':
              this.startRandomTour();
              break;
            case 'guided-path':
              this.startGuidedPath();
              break;
            case 'developer-demo':
              this.showDeveloperDemo();
              break;
            case 'debug-info':
              console.log('Test button clicked');
              console.log('introJs available:', typeof introJs);
              console.log('demoController:', window.demoController);
              break;
          }
        });
      });
    }
    
    showPreview(cardElement) {
      const overlay = cardElement.querySelector('.preview-overlay');
      if (overlay) {
        overlay.classList.remove('hidden');
        overlay.classList.add('flex');
        setTimeout(() => overlay.classList.add('opacity-100'), 50);
      }
    }
    
    hidePreview(cardElement) {
      const overlay = cardElement.querySelector('.preview-overlay');
      if (overlay) {
        overlay.classList.remove('opacity-100');
        setTimeout(() => {
          overlay.classList.add('hidden');
          overlay.classList.remove('flex');
        }, 300);
      }
    }
    
    showLoadingState() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.classList.remove('hidden');
      loadingOverlay.classList.add('flex');
    }
    
    hideLoadingState() {
      const loadingOverlay = document.getElementById('loading-overlay');
      loadingOverlay.classList.add('hidden');
      loadingOverlay.classList.remove('flex');
    }
    
    async startTour(workflowKey) {
      console.log('Starting tour for workflow:', workflowKey);
      
      try {
        // Check if introJs is available
        if (typeof introJs === 'undefined') {
          throw new Error('Intro.js library is not loaded');
        }
        
        // Show loading state
        this.showLoadingState();
        
        // Load tour configuration
        console.log('Fetching tour configuration...');
        const response = await fetch(`/demos/start_tour?workflow=${workflowKey}`);
        const tourData = await response.json();
        
        console.log('Tour data received:', tourData);
        
        if (tourData.success) {
          this.currentTour = workflowKey;
          this.currentAnalyticsId = tourData.analytics_id;
          this.currentStepStartTime = Date.now();
          
          // Convert steps to demo-friendly format (no specific elements needed)
          const demoSteps = tourData.tour_config.steps.map((step, index) => ({
            intro: step.intro,
            position: 'auto',
            tooltipClass: 'ai-demo-tooltip'
          }));
          
          console.log('Demo steps prepared:', demoSteps);
          
          // Initialize and start Intro.js tour
          const intro = introJs();
          intro.setOptions({
              showProgress: true,
              showBullets: false,
              exitOnOverlayClick: false,
              exitOnEsc: true,
              nextLabel: "Next ‚Üí",
              prevLabel: "‚Üê Back",
              doneLabel: "üéâ Complete Demo!",
              tooltipClass: "ai-demo-tooltip",
              highlightClass: "ai-demo-highlight",
              steps: demoSteps
            })
            .onstart(() => {
              this.onTourStart(workflowKey);
            })
            .onbeforechange((targetElement) => {
              // Track previous step completion
              if (this.currentAnalyticsId && this.currentStepStartTime) {
                const currentStep = intro._currentStep;
                const timeSpent = Math.floor((Date.now() - this.currentStepStartTime) / 1000);
                
                if (currentStep > 0) {
                  this.trackStepCompletion(
                    currentStep,
                    tourData.tour_config.steps[currentStep - 1]?.intro || `Step ${currentStep}`,
                    timeSpent
                  );
                }
              }
              
              // Reset timer for next step
              this.currentStepStartTime = Date.now();
            })
            .oncomplete(() => {
              this.onTourComplete(workflowKey);
            })
            .onexit(() => {
              this.onTourExit(workflowKey, intro._currentStep || 0);
            })
            .start();
            
        } else {
          console.error('Failed to load tour:', tourData.error);
          this.showErrorMessage('Failed to start demo. Please try again.');
        }
      } catch (error) {
        console.error('Error starting tour:', error);
        this.showErrorMessage('An error occurred while starting the demo.');
      } finally {
        this.hideLoadingState();
      }
    }
    
    startRandomTour() {
      const workflowKeys = Object.keys(this.workflows);
      const randomKey = workflowKeys[Math.floor(Math.random() * workflowKeys.length)];
      this.startTour(randomKey);
    }
    
    startGuidedPath() {
      // Sequential tour through beginner ‚Üí intermediate ‚Üí advanced workflows
      const guidedSequence = ['social-content', 'email-content', 'journey-ai', 'content-optimization'];
      this.showMessage('üó∫ Starting guided tour through all major AI features...');
      this.startTour(guidedSequence[0]);
    }
    
    showDeveloperDemo() {
      this.startTour('api-integration');
    }
    
    onTourStart(workflowKey) {
      console.log(`Started tour: ${workflowKey}`);
    }
    
    onTourComplete(workflowKey) {
      // Track final completion
      this.trackAnalyticsEvent('completed');
      
      // Show success message
      this.showSuccessMessage(`‚úÖ Demo completed! You experienced "${this.workflows[workflowKey].title}"`);
    }
    
    onTourExit(workflowKey, currentStep) {
      console.log(`Exited tour: ${workflowKey} at step ${currentStep}`);
      this.trackAnalyticsEvent('exited', currentStep);
    }
    
    trackStepCompletion(stepNumber, stepTitle, timeSpent) {
      if (this.currentAnalyticsId) {
        this.trackAnalyticsEvent('step_completed', stepNumber, stepTitle, timeSpent);
      }
    }
    
    trackAnalyticsEvent(event, stepNumber = null, stepTitle = null, timeSpent = null) {
      if (!this.currentAnalyticsId) return;
      
      fetch('/demos/track_completion', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          analytics_id: this.currentAnalyticsId,
          event: event,
          step_number: stepNumber,
          step_title: stepTitle,
          time_spent: timeSpent,
          timestamp: new Date().toISOString()
        })
      }).catch(error => console.log('Analytics tracking failed:', error));
    }
    
    showSuccessMessage(message) {
      this.showNotification(message, 'bg-green-500');
    }
    
    showErrorMessage(message) {
      this.showNotification(message, 'bg-red-500');
    }
    
    showMessage(message) {
      this.showNotification(message, 'bg-blue-500');
    }
    
    showNotification(message, bgClass) {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 ${bgClass} text-white p-4 rounded-lg shadow-lg z-50 max-w-sm`;
      notification.innerHTML = message;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 5000);
    }
    
  }
  
  // Initialize demo controller
  function initializeDemoController() {
    console.log('Attempting to initialize demo controller...');
    
    // Check if introJs is available
    if (typeof introJs === 'undefined') {
      console.error('Intro.js is not loaded!');
      setTimeout(initializeDemoController, 100); // Retry after 100ms
      return;
    }
    
    try {
      window.demoController = new DemoController();
      console.log('Demo controller initialized successfully');
    } catch (error) {
      console.error('Error initializing demo controller:', error);
    }
  }
  
  // Try to initialize immediately, then on DOMContentLoaded, then as fallback
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDemoController);
  } else {
    initializeDemoController();
  }
  
  // Also try after a short delay as fallback
  setTimeout(initializeDemoController, 500);
  
  // Keep global functions as fallback for any remaining onclick handlers
  window.startTour = (workflowKey) => {
    if (window.demoController) {
      window.demoController.startTour(workflowKey);
    } else {
      console.error('Demo controller not initialized');
      alert('Demo system not ready. Please refresh the page and try again.');
    }
  };
  window.startRandomTour = () => window.demoController?.startRandomTour();
  window.startGuidedPath = () => window.demoController?.startGuidedPath();
  window.showDeveloperDemo = () => window.demoController?.showDeveloperDemo();
</script>

<!-- Custom Demo Styling -->
<style>
  .demo-landing-page {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .hero-section {
    position: relative;
    overflow: hidden;
  }
  
  .hero-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.1;
  }
  
  .workflow-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .workflow-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  .start-demo-btn {
    position: relative;
    overflow: hidden;
  }
  
  .start-demo-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  
  .start-demo-btn:hover::before {
    left: 100%;
  }
  
  .preview-overlay {
    backdrop-filter: blur(10px);
  }
  
  .loading-spinner {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* Intro.js Custom Styling */
  :global(.introjs-tooltip) {
    background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%) !important;
    border: none !important;
    border-radius: 12px !important;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
    color: #f1f5f9 !important;
  }
  
  :global(.introjs-tooltip-header) {
    background: rgba(255, 255, 255, 0.1) !important;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1) !important;
    border-radius: 12px 12px 0 0 !important;
  }
  
  :global(.introjs-tooltiptext) {
    color: #f1f5f9 !important;
    font-size: 16px !important;
    line-height: 1.6 !important;
  }
  
  :global(.introjs-button) {
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%) !important;
    border: none !important;
    border-radius: 8px !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 10px 16px !important;
    transition: all 0.2s !important;
  }
  
  :global(.introjs-button:hover) {
    background: linear-gradient(135deg, #4338ca 0%, #6d28d9 100%) !important;
    transform: translateY(-1px) !important;
  }
</style>
