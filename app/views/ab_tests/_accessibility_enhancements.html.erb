<%# Accessibility Enhancements for A/B Testing Dashboard %>

<% content_for :head do %>
  <style>
    /* High contrast mode support */
    @media (prefers-contrast: high) {
      .ab-test-card {
        border-width: 2px;
        border-color: #000;
      }
      
      .status-badge {
        border: 1px solid currentColor;
      }
    }
    
    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
      .animate-pulse,
      .transition-all,
      .transition-colors,
      .transition-shadow {
        animation: none !important;
        transition: none !important;
      }
      
      .progress-bar {
        transition: none !important;
      }
    }
    
    /* Focus indicators */
    .focus-outline:focus {
      outline: 3px solid #3b82f6;
      outline-offset: 2px;
    }
    
    /* Screen reader only content */
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
    
    /* Skip links */
    .skip-link {
      position: absolute;
      top: -40px;
      left: 6px;
      background: #000;
      color: #fff;
      padding: 8px;
      text-decoration: none;
      border-radius: 4px;
      z-index: 1000;
    }
    
    .skip-link:focus {
      top: 6px;
    }
  </style>
<% end %>

<!-- Skip Navigation Links -->
<nav aria-label="Skip navigation">
  <a href="#main-content" class="skip-link focus-outline">Skip to main content</a>
  <a href="#test-filters" class="skip-link focus-outline">Skip to test filters</a>
  <a href="#test-list" class="skip-link focus-outline">Skip to test list</a>
</nav>

<!-- Screen Reader Announcements -->
<div id="sr-announcements" aria-live="polite" aria-atomic="true" class="sr-only"></div>
<div id="sr-alerts" aria-live="assertive" aria-atomic="true" class="sr-only"></div>

<!-- Accessibility JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Announce page changes to screen readers
    function announceToScreenReader(message, isAlert = false) {
      const targetElement = isAlert ? 
        document.getElementById('sr-alerts') : 
        document.getElementById('sr-announcements');
      
      if (targetElement) {
        targetElement.textContent = message;
        // Clear after a short delay to allow for future announcements
        setTimeout(() => {
          targetElement.textContent = '';
        }, 1000);
      }
    }
    
    // Announce status changes
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
      return originalFetch.apply(this, args).then(response => {
        if (response.url.includes('ab_tests') && response.ok) {
          announceToScreenReader('Test data updated');
        }
        return response;
      });
    };
    
    // Keyboard navigation support for cards
    document.querySelectorAll('[data-keyboard-navigable]').forEach(element => {
      element.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          const link = this.querySelector('a');
          if (link) {
            link.click();
          }
        }
      });
    });
    
    // Focus management for modals and dropdowns
    function trapFocus(element) {
      const focusableElements = element.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      element.addEventListener('keydown', function(e) {
        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              lastElement.focus();
              e.preventDefault();
            }
          } else {
            if (document.activeElement === lastElement) {
              firstElement.focus();
              e.preventDefault();
            }
          }
        }
        
        if (e.key === 'Escape') {
          element.querySelector('[data-dismiss]')?.click();
        }
      });
    }
    
    // Apply focus trapping to dropdown menus
    document.querySelectorAll('[data-dropdown-target="menu"]').forEach(trapFocus);
    
    // Announce dynamic content changes
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach(function(node) {
            if (node.nodeType === Node.ELEMENT_NODE) {
              // Announce new test cards
              if (node.classList?.contains('test-card')) {
                const testName = node.querySelector('h3')?.textContent;
                if (testName) {
                  announceToScreenReader(`New test added: ${testName}`);
                }
              }
              
              // Announce status changes
              if (node.classList?.contains('status-badge')) {
                const status = node.textContent?.trim();
                if (status) {
                  announceToScreenReader(`Test status changed to ${status}`);
                }
              }
            }
          });
        }
      });
    });
    
    // Observe the test list for changes
    const testList = document.querySelector('[data-test-list]');
    if (testList) {
      observer.observe(testList, { childList: true, subtree: true });
    }
    
    // Handle form validation announcements
    document.querySelectorAll('form').forEach(form => {
      form.addEventListener('submit', function(e) {
        const errors = form.querySelectorAll('.error, [aria-invalid="true"]');
        if (errors.length > 0) {
          announceToScreenReader(`Form has ${errors.length} error${errors.length !== 1 ? 's' : ''}`, true);
        }
      });
    });
    
    // Progress bar announcements
    function announceProgressChanges() {
      document.querySelectorAll('[role="progressbar"]').forEach(progressBar => {
        const currentValue = progressBar.getAttribute('aria-valuenow');
        const maxValue = progressBar.getAttribute('aria-valuemax');
        const percentage = Math.round((currentValue / maxValue) * 100);
        
        progressBar.setAttribute('aria-valuetext', `${percentage}% complete`);
      });
    }
    
    // Check for progress bar updates every 30 seconds
    setInterval(announceProgressChanges, 30000);
    
    // Handle keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      // Alt + N: Create new test
      if (e.altKey && e.key === 'n') {
        e.preventDefault();
        const newTestButton = document.querySelector('[href*="new"]');
        if (newTestButton) {
          newTestButton.click();
          announceToScreenReader('Creating new test');
        }
      }
      
      // Alt + R: Refresh dashboard
      if (e.altKey && e.key === 'r') {
        e.preventDefault();
        const refreshButton = document.querySelector('[data-action*="refresh"]');
        if (refreshButton) {
          refreshButton.click();
          announceToScreenReader('Refreshing dashboard');
        }
      }
    });
    
    // Color blindness support - add patterns to progress bars
    document.querySelectorAll('.progress-bar').forEach(bar => {
      const status = bar.dataset.status;
      if (status === 'running') {
        bar.style.backgroundImage = 'repeating-linear-gradient(45deg, transparent, transparent 2px, rgba(255,255,255,0.1) 2px, rgba(255,255,255,0.1) 4px)';
      } else if (status === 'paused') {
        bar.style.backgroundImage = 'repeating-linear-gradient(90deg, transparent, transparent 4px, rgba(255,255,255,0.2) 4px, rgba(255,255,255,0.2) 8px)';
      }
    });
  });
</script>