<% content_for :title, "Analytics Dashboard" %>
<% content_for :head do %>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/react-date-range@1.4.0/dist/styles.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/react-date-range@1.4.0/dist/theme/default.css">
<% end %>

<div class="analytics-dashboard-page">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Analytics Dashboard</h1>
          <p class="mt-1 text-sm text-gray-500">
            Real-time insights across all your marketing channels
          </p>
        </div>
        
        <!-- Brand Selector -->
        <div class="flex items-center space-x-4">
          <% if current_user.brands.any? %>
            <div class="relative">
              <label for="brand-selector" class="sr-only">Select Brand</label>
              <select 
                id="brand-selector" 
                class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                onchange="handleBrandChange(this.value)"
              >
                <option value="">Select a brand...</option>
                <% current_user.brands.each do |brand| %>
                  <option 
                    value="<%= brand.id %>" 
                    <%= 'selected' if @brand && @brand.id == brand.id %>
                  >
                    <%= brand.name %>
                  </option>
                <% end %>
              </select>
            </div>
          <% else %>
            <div class="text-sm text-gray-500">
              <%= link_to "Create your first brand", new_brand_path, class: "text-blue-600 hover:text-blue-800" %>
            </div>
          <% end %>
          
          <!-- Refresh Button -->
          <button 
            id="refresh-dashboard"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            onclick="refreshDashboard()"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Refresh
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Dashboard Content -->
  <% if @brand %>
    <div 
      data-controller="analytics-dashboard"
      data-analytics-dashboard-brand-id-value="<%= @brand.id %>"
      data-analytics-dashboard-user-id-value="<%= current_user.id %>"
      data-analytics-dashboard-initial-metrics-value="<%= @initial_metrics.to_json %>"
      data-analytics-dashboard-auto-refresh-value="true"
      data-analytics-dashboard-refresh-interval-value="30000"
      class="analytics-dashboard-container"
    >
      <!-- Loading Overlay -->
      <div class="loading-overlay hidden fixed inset-0 bg-gray-600 bg-opacity-50 z-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-lg flex items-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-3"></div>
          <span class="text-lg">Loading analytics data...</span>
        </div>
      </div>

      <!-- React Component Container -->
      <div 
        data-analytics-dashboard-target="container"
        class="analytics-dashboard-react-root"
        role="main"
        aria-label="Analytics Dashboard"
      >
        <!-- Loading state before React mounts -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Initializing dashboard...</p>
          </div>
        </div>
      </div>
    </div>
  <% else %>
    <!-- No Brand Selected State -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="text-center">
        <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
        <h3 class="mt-4 text-lg font-medium text-gray-900">No brand selected</h3>
        <p class="mt-2 text-gray-500">Select a brand from the dropdown above to view analytics data.</p>
        
        <% if current_user.brands.empty? %>
          <div class="mt-6">
            <%= link_to new_brand_path, class: "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700" do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Create Your First Brand
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>
</div>

<!-- Styles for dashboard loading states -->
<style>
.analytics-dashboard-container.loading .loading-overlay {
  display: flex !important;
}

.analytics-dashboard-react-root {
  min-height: 60vh;
}

/* Responsive improvements */
@media (max-width: 640px) {
  .analytics-dashboard-page .flex {
    flex-direction: column;
    align-items: stretch;
  }
  
  .analytics-dashboard-page .space-x-4 > * {
    margin-left: 0;
    margin-top: 0.5rem;
  }
  
  .analytics-dashboard-page .space-x-4 > *:first-child {
    margin-top: 0;
  }
}

/* Chart responsiveness */
.recharts-wrapper {
  font-size: 12px;
}

@media (max-width: 768px) {
  .recharts-wrapper {
    font-size: 10px;
  }
}

/* Performance optimizations */
.analytics-dashboard-react-root * {
  box-sizing: border-box;
}

/* Accessibility improvements */
.analytics-dashboard-container [role="button"] {
  cursor: pointer;
}

.analytics-dashboard-container [aria-expanded="true"] + * {
  display: block;
}

.analytics-dashboard-container [aria-expanded="false"] + * {
  display: none;
}
</style>

<!-- JavaScript for dashboard interactions -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Handle brand selection changes
  window.handleBrandChange = function(brandId) {
    if (brandId) {
      const url = new URL(window.location);
      url.searchParams.set('brand_id', brandId);
      window.location.href = url.toString();
    }
  };

  // Handle dashboard refresh
  window.refreshDashboard = function() {
    const controller = document.querySelector('[data-controller="analytics-dashboard"]');
    if (controller && controller.application) {
      const controllerInstance = controller.application.getControllerForElementAndIdentifier(controller, 'analytics-dashboard');
      if (controllerInstance && controllerInstance.refreshData) {
        controllerInstance.refreshData();
      }
    } else {
      // Fallback: reload the page
      window.location.reload();
    }
  };

  // Handle keyboard shortcuts
  document.addEventListener('keydown', function(event) {
    // Ctrl/Cmd + R: Refresh dashboard
    if ((event.ctrlKey || event.metaKey) && event.key === 'r') {
      event.preventDefault();
      refreshDashboard();
    }
  });

  // Handle connection status
  let connectionStatusElement = document.getElementById('connection-status');
  if (!connectionStatusElement) {
    connectionStatusElement = document.createElement('div');
    connectionStatusElement.id = 'connection-status';
    connectionStatusElement.className = 'fixed top-4 right-4 z-50 hidden';
    document.body.appendChild(connectionStatusElement);
  }

  // Listen for custom events from React component
  document.addEventListener('analytics:export', function(event) {
    console.log('Export requested:', event.detail.format);
    // Handle export events if needed
  });

  document.addEventListener('analytics:error', function(event) {
    console.error('Analytics error:', event.detail.message);
    showErrorNotification(event.detail.message);
  });

  document.addEventListener('analytics:connected', function() {
    showConnectionStatus('Connected', 'green');
  });

  document.addEventListener('analytics:disconnected', function() {
    showConnectionStatus('Disconnected', 'red');
  });

  // Utility functions
  function showConnectionStatus(message, color) {
    const statusEl = document.getElementById('connection-status');
    statusEl.innerHTML = `
      <div class="bg-${color}-100 border border-${color}-400 text-${color}-700 px-4 py-3 rounded">
        ${message}
      </div>
    `;
    statusEl.classList.remove('hidden');
    
    setTimeout(() => {
      statusEl.classList.add('hidden');
    }, 3000);
  }

  function showErrorNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 z-50 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded max-w-md';
    notification.innerHTML = `
      <div class="flex justify-between items-center">
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="text-red-700 hover:text-red-900 font-bold ml-4">Ã—</button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }

  // Performance monitoring
  if ('performance' in window && 'PerformanceObserver' in window) {
    const observer = new PerformanceObserver((list) => {
      list.getEntries().forEach((entry) => {
        if (entry.name.includes('analytics') && entry.duration > 3000) {
          console.warn(`Slow analytics operation: ${entry.name} took ${entry.duration.toFixed(2)}ms`);
        }
      });
    });
    
    observer.observe({ entryTypes: ['measure', 'navigation'] });
  }

  // Visibility API for performance optimization
  document.addEventListener('visibilitychange', function() {
    const controller = document.querySelector('[data-controller="analytics-dashboard"]');
    if (controller && controller.application) {
      const controllerInstance = controller.application.getControllerForElementAndIdentifier(controller, 'analytics-dashboard');
      
      if (document.hidden) {
        // Page is hidden, pause auto-refresh
        if (controllerInstance && controllerInstance.stopAutoRefresh) {
          controllerInstance.stopAutoRefresh();
        }
      } else {
        // Page is visible, resume auto-refresh
        if (controllerInstance && controllerInstance.startAutoRefresh) {
          controllerInstance.startAutoRefresh();
        }
      }
    }
  });
});
</script>