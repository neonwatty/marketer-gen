class ExportTemplateService
  include ActiveModel::Model
  include ActiveModel::Attributes

  attr_accessor :template_name, :brand_settings, :format_type, :customizations

  AVAILABLE_TEMPLATES = {
    csv: %w[standard detailed performance_focused brand_summary],
    pdf: %w[standard professional minimal branded executive_summary],
    calendar: %w[standard detailed color_coded priority_based]
  }.freeze

  DEFAULT_BRAND_SETTINGS = {
    primary_color: '#007bff',
    secondary_color: '#6c757d',
    accent_color: '#28a745',
    font_family: 'Arial',
    logo_text: nil,
    company_name: 'Marketing Platform',
    footer_text: 'Generated by Marketing Campaign Platform'
  }.freeze

  def initialize(template_name:, brand_settings: {}, format_type: :csv, customizations: {})
    @template_name = template_name.to_s
    @brand_settings = DEFAULT_BRAND_SETTINGS.merge(brand_settings || {})
    @format_type = format_type.to_sym
    @customizations = customizations || {}
  end

  def apply_template(export_service, data)
    validate_template!
    
    case format_type
    when :csv
      apply_csv_template(export_service, data)
    when :pdf
      apply_pdf_template(export_service, data)
    when :calendar
      apply_calendar_template(export_service, data)
    else
      raise ArgumentError, "Unsupported format type: #{format_type}"
    end
  end

  def get_template_config
    {
      template_name: template_name,
      format_type: format_type,
      brand_settings: brand_settings,
      customizations: customizations,
      columns: get_template_columns,
      styling: get_template_styling,
      layout: get_template_layout
    }
  end

  # Static methods for quick template application
  def self.apply_branded_template(export_service, data, brand_identity, format_type: :csv)
    brand_settings = extract_brand_settings_from_identity(brand_identity)
    template_name = determine_optimal_template(data, format_type)
    
    new(
      template_name: template_name,
      brand_settings: brand_settings,
      format_type: format_type
    ).apply_template(export_service, data)
  end

  def self.apply_standard_template(export_service, data, format_type: :csv, customizations: {})
    new(
      template_name: 'standard',
      format_type: format_type,
      customizations: customizations
    ).apply_template(export_service, data)
  end

  def self.get_available_templates(format_type = nil)
    if format_type
      AVAILABLE_TEMPLATES[format_type.to_sym] || []
    else
      AVAILABLE_TEMPLATES
    end
  end

  private

  def validate_template!
    available_templates = AVAILABLE_TEMPLATES[format_type] || []
    unless available_templates.include?(template_name)
      raise ArgumentError, "Template '#{template_name}' not available for format '#{format_type}'. Available: #{available_templates.join(', ')}"
    end
  end

  # CSV Template Methods
  def apply_csv_template(export_service, data)
    case template_name
    when 'standard'
      apply_standard_csv_template(export_service, data)
    when 'detailed'
      apply_detailed_csv_template(export_service, data)
    when 'performance_focused'
      apply_performance_csv_template(export_service, data)
    when 'brand_summary'
      apply_brand_summary_csv_template(export_service, data)
    end
  end

  def apply_standard_csv_template(export_service, data)
    # Standard template uses default columns with basic branding
    options = {
      include_header_comments: true,
      header_comments: build_csv_header_comments,
      column_formatting: get_standard_csv_formatting
    }
    
    export_service.options.merge!(options)
    export_service
  end

  def apply_detailed_csv_template(export_service, data)
    # Detailed template includes all available columns and metadata
    detailed_columns = get_detailed_columns_for_data_type(data)
    
    options = {
      columns: detailed_columns,
      include_metadata: true,
      include_header_comments: true,
      header_comments: build_csv_header_comments,
      column_formatting: get_detailed_csv_formatting
    }
    
    export_service.columns = detailed_columns if export_service.respond_to?(:columns=)
    export_service.options.merge!(options)
    export_service
  end

  def apply_performance_csv_template(export_service, data)
    # Performance-focused template emphasizes metrics and KPIs
    performance_columns = get_performance_columns_for_data_type(data)
    
    options = {
      columns: performance_columns,
      order_by: 'performance_score',
      order_direction: 'desc',
      include_summary_stats: true,
      header_comments: build_performance_csv_header_comments
    }
    
    export_service.columns = performance_columns if export_service.respond_to?(:columns=)
    export_service.options.merge!(options)
    export_service
  end

  def apply_brand_summary_csv_template(export_service, data)
    # Brand summary template focuses on brand-related information
    brand_columns = get_brand_columns_for_data_type(data)
    
    options = {
      columns: brand_columns,
      include_brand_info: true,
      header_comments: build_brand_csv_header_comments,
      group_by_brand: true
    }
    
    export_service.columns = brand_columns if export_service.respond_to?(:columns=)
    export_service.options.merge!(options)
    export_service
  end

  # PDF Template Methods
  def apply_pdf_template(export_service, data)
    case template_name
    when 'standard'
      apply_standard_pdf_template(export_service, data)
    when 'professional'
      apply_professional_pdf_template(export_service, data)
    when 'minimal'
      apply_minimal_pdf_template(export_service, data)
    when 'branded'
      apply_branded_pdf_template(export_service, data)
    when 'executive_summary'
      apply_executive_pdf_template(export_service, data)
    end
  end

  def apply_standard_pdf_template(export_service, data)
    options = {
      pdf_options: {
        page_size: 'A4',
        margin: 50
      },
      include_header: true,
      include_footer: true,
      font_size: 10
    }
    
    export_service.brand_settings = brand_settings
    export_service.options.merge!(options)
    export_service
  end

  def apply_professional_pdf_template(export_service, data)
    options = {
      pdf_options: {
        page_size: 'A4',
        margin: 60
      },
      include_cover_page: true,
      include_table_of_contents: true,
      include_executive_summary: true,
      font_size: 11,
      line_spacing: 1.2,
      section_breaks: true
    }
    
    export_service.brand_settings = brand_settings.merge(professional_styling)
    export_service.options.merge!(options)
    export_service
  end

  def apply_minimal_pdf_template(export_service, data)
    options = {
      pdf_options: {
        page_size: 'A4',
        margin: 40
      },
      minimal_styling: true,
      include_header: false,
      include_decorative_elements: false,
      font_size: 9
    }
    
    export_service.brand_settings = brand_settings.merge(minimal_styling)
    export_service.options.merge!(options)
    export_service
  end

  def apply_branded_pdf_template(export_service, data)
    options = {
      pdf_options: {
        page_size: 'A4',
        margin: 50
      },
      include_brand_elements: true,
      include_color_accents: true,
      include_logo_placeholder: true,
      brand_colors_throughout: true,
      font_size: 10
    }
    
    export_service.brand_settings = brand_settings.merge(branded_styling)
    export_service.options.merge!(options)
    export_service
  end

  def apply_executive_pdf_template(export_service, data)
    options = {
      pdf_options: {
        page_size: 'A4',
        margin: 60
      },
      executive_format: true,
      include_executive_summary: true,
      include_key_metrics: true,
      include_recommendations: true,
      high_level_view: true,
      font_size: 11
    }
    
    export_service.brand_settings = brand_settings.merge(executive_styling)
    export_service.options.merge!(options)
    export_service
  end

  # Calendar Template Methods
  def apply_calendar_template(export_service, data)
    case template_name
    when 'standard'
      apply_standard_calendar_template(export_service, data)
    when 'detailed'
      apply_detailed_calendar_template(export_service, data)
    when 'color_coded'
      apply_color_coded_calendar_template(export_service, data)
    when 'priority_based'
      apply_priority_calendar_template(export_service, data)
    end
  end

  def apply_standard_calendar_template(export_service, data)
    options = {
      include_descriptions: true,
      include_categories: true,
      reminder_settings: { minutes_before: 15 }
    }
    
    export_service.options.merge!(options)
    export_service
  end

  def apply_detailed_calendar_template(export_service, data)
    options = {
      include_descriptions: true,
      include_detailed_metadata: true,
      include_categories: true,
      include_custom_fields: true,
      reminder_settings: { minutes_before: 30 },
      include_attachments: true
    }
    
    export_service.options.merge!(options)
    export_service
  end

  def apply_color_coded_calendar_template(export_service, data)
    options = {
      color_coding: build_color_coding_scheme,
      include_categories: true,
      reminder_settings: { minutes_before: 15 }
    }
    
    export_service.options.merge!(options)
    export_service
  end

  def apply_priority_calendar_template(export_service, data)
    options = {
      priority_based_formatting: true,
      high_priority_reminders: { minutes_before: 60 },
      medium_priority_reminders: { minutes_before: 30 },
      low_priority_reminders: { minutes_before: 15 },
      include_priority_indicators: true
    }
    
    export_service.options.merge!(options)
    export_service
  end

  # Template Configuration Methods
  def get_template_columns
    case [format_type, template_name]
    when [:csv, 'detailed']
      get_detailed_csv_columns
    when [:csv, 'performance_focused']
      get_performance_csv_columns
    when [:csv, 'brand_summary']
      get_brand_csv_columns
    else
      get_standard_columns
    end
  end

  def get_template_styling
    case template_name
    when 'professional'
      professional_styling
    when 'minimal'
      minimal_styling
    when 'branded'
      branded_styling
    when 'executive_summary'
      executive_styling
    else
      standard_styling
    end
  end

  def get_template_layout
    case template_name
    when 'professional'
      professional_layout
    when 'minimal'
      minimal_layout
    when 'executive_summary'
      executive_layout
    else
      standard_layout
    end
  end

  # Column Configuration Methods
  def get_detailed_columns_for_data_type(data)
    if data.respond_to?(:model_class)
      model_class = data.model_class
    elsif data.is_a?(Hash) && data[:campaigns]
      model_class = Campaign
    else
      return get_standard_columns
    end

    case model_class.name
    when 'Campaign'
      %w[id name status purpose budget start_date end_date duration_days progress_percentage brand_identity_name created_at updated_at]
    when 'ContentVariant'
      %w[id name variant_number strategy_type status performance_score content_preview campaign_name tags_list metadata_summary testing_started_at testing_completed_at created_at updated_at]
    when 'ContentAsset'
      %w[id title channel asset_type status content_preview campaign_name brand_identity_name file_size upload_date created_at updated_at]
    when 'Journey'
      %w[id name description status priority campaign_name total_stages completed_stages progress_percentage created_at updated_at]
    when 'BrandAsset'
      %w[id name asset_type status description file_size brand_identity_name metadata_summary created_at updated_at]
    else
      get_standard_columns
    end
  end

  def get_performance_columns_for_data_type(data)
    base_columns = %w[id name status performance_score]
    
    if data.respond_to?(:model_class) && data.model_class == ContentVariant
      base_columns + %w[strategy_type campaign_name testing_started_at testing_completed_at conversion_rate engagement_rate]
    else
      base_columns + %w[created_at updated_at]
    end
  end

  def get_brand_columns_for_data_type(data)
    %w[id name brand_identity_name status created_at updated_at brand_guidelines_adherence]
  end

  def get_detailed_csv_columns
    %w[id name status description created_at updated_at]
  end

  def get_performance_csv_columns
    %w[id name status performance_score created_at]
  end

  def get_brand_csv_columns
    %w[id name brand_identity_name status created_at]
  end

  def get_standard_columns
    %w[id name status created_at updated_at]
  end

  # Styling Configuration Methods
  def standard_styling
    {
      font_family: brand_settings[:font_family],
      primary_color: brand_settings[:primary_color],
      text_color: '#333333',
      background_color: '#ffffff'
    }
  end

  def professional_styling
    {
      font_family: 'Times-Roman',
      primary_color: brand_settings[:primary_color],
      secondary_color: '#2c3e50',
      text_color: '#2c3e50',
      background_color: '#ffffff',
      accent_color: brand_settings[:accent_color]
    }
  end

  def minimal_styling
    {
      font_family: 'Helvetica',
      primary_color: '#000000',
      text_color: '#333333',
      background_color: '#ffffff',
      minimal_colors: true
    }
  end

  def branded_styling
    {
      font_family: brand_settings[:font_family],
      primary_color: brand_settings[:primary_color],
      secondary_color: brand_settings[:secondary_color],
      accent_color: brand_settings[:accent_color],
      text_color: '#333333',
      background_color: '#ffffff',
      use_brand_colors: true
    }
  end

  def executive_styling
    {
      font_family: 'Times-Roman',
      primary_color: '#1a365d',
      secondary_color: '#2d3748',
      text_color: '#2d3748',
      background_color: '#ffffff',
      executive_formatting: true
    }
  end

  # Layout Configuration Methods
  def standard_layout
    {
      header_height: 50,
      footer_height: 30,
      margin: 50,
      section_spacing: 20
    }
  end

  def professional_layout
    {
      header_height: 80,
      footer_height: 40,
      margin: 60,
      section_spacing: 30,
      include_cover_page: true,
      include_toc: true
    }
  end

  def minimal_layout
    {
      header_height: 20,
      footer_height: 20,
      margin: 40,
      section_spacing: 15,
      minimal_elements: true
    }
  end

  def executive_layout
    {
      header_height: 60,
      footer_height: 30,
      margin: 60,
      section_spacing: 25,
      executive_format: true
    }
  end

  # CSV Helper Methods
  def build_csv_header_comments
    comments = []
    comments << "Generated by: #{brand_settings[:company_name]}"
    comments << "Export Date: #{Time.current.strftime('%Y-%m-%d %H:%M:%S')}"
    comments << "Template: #{template_name.humanize}"
    
    if brand_settings[:logo_text]
      comments << "Brand: #{brand_settings[:logo_text]}"
    end
    
    comments
  end

  def build_performance_csv_header_comments
    build_csv_header_comments + [
      "Focus: Performance Metrics and KPIs",
      "Sorted by: Performance Score (Descending)"
    ]
  end

  def build_brand_csv_header_comments
    build_csv_header_comments + [
      "Focus: Brand-related Information",
      "Grouped by: Brand Identity"
    ]
  end

  def get_standard_csv_formatting
    {
      date_format: '%Y-%m-%d',
      number_precision: 2,
      boolean_format: 'Yes/No'
    }
  end

  def get_detailed_csv_formatting
    {
      date_format: '%Y-%m-%d %H:%M:%S',
      number_precision: 3,
      boolean_format: 'True/False',
      include_units: true
    }
  end

  # Calendar Helper Methods
  def build_color_coding_scheme
    {
      'campaign_launch' => brand_settings[:primary_color],
      'campaign_end' => brand_settings[:secondary_color],
      'content_publish' => brand_settings[:accent_color],
      'milestone' => '#ffc107',
      'deadline' => '#dc3545'
    }
  end

  # Brand Settings Extraction
  def self.extract_brand_settings_from_identity(brand_identity)
    return DEFAULT_BRAND_SETTINGS unless brand_identity

    settings = DEFAULT_BRAND_SETTINGS.dup
    
    if brand_identity.respond_to?(:primary_color) && brand_identity.primary_color.present?
      settings[:primary_color] = brand_identity.primary_color
    end
    
    if brand_identity.respond_to?(:secondary_color) && brand_identity.secondary_color.present?
      settings[:secondary_color] = brand_identity.secondary_color
    end
    
    if brand_identity.respond_to?(:name) && brand_identity.name.present?
      settings[:company_name] = brand_identity.name
      settings[:logo_text] = brand_identity.name
    end
    
    if brand_identity.respond_to?(:font_family) && brand_identity.font_family.present?
      settings[:font_family] = brand_identity.font_family
    end
    
    settings
  end

  def self.determine_optimal_template(data, format_type)
    case format_type
    when :csv
      data.respond_to?(:performance_score) ? 'performance_focused' : 'standard'
    when :pdf
      'professional'
    when :calendar
      'standard'
    else
      'standard'
    end
  end
end