// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete functionality

  // NextAuth.js relationships
  accounts Account[]
  sessions Session[]

  // Application relationships
  brands    Brand[]
  campaigns Campaign[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enhanced Brand model with structured fields for comprehensive brand management
model Brand {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  website     String?
  
  // Brand Identity
  tagline     String?
  mission     String?
  vision      String?
  values      Json?    // Array of brand values
  personality Json?    // Brand personality traits
  
  // Brand Voice & Tone
  voiceDescription String?
  toneAttributes   Json?    // Tone characteristics
  communicationStyle String?
  messagingFramework Json?  // Key messaging pillars
  
  // Brand Guidelines
  brandPillars    Json?    // Core brand pillars
  targetAudience  Json?    // Target audience segments
  competitivePosition String?
  brandPromise    String?
  
  // Compliance & Usage
  complianceRules Json?    // Brand compliance guidelines
  usageGuidelines Json?    // How to use brand assets
  restrictedTerms Json?    // Terms to avoid
  
  // Metadata
  userId     String   // Foreign key to User
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime? // Soft delete functionality
  createdBy  String?   // User who created this brand
  updatedBy  String?   // User who last updated this brand

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns    Campaign[]
  brandAssets  BrandAsset[]
  colorPalette ColorPalette[]
  typography   Typography[]

  @@map("brands")
}

// Brand Asset model for managing uploaded brand files
model BrandAsset {
  id          String          @id @default(cuid())
  brandId     String          // Foreign key to Brand
  name        String
  description String?
  type        BrandAssetType
  category    String?         // Custom category for organization
  fileUrl     String          // URL or path to the file
  fileName    String          // Original file name
  fileSize    Int?            // File size in bytes
  mimeType    String?         // MIME type of the file
  metadata    Json?           // Additional file metadata
  tags        Json?           // Tags for searchability
  version     String?         // Version of the asset
  isActive    Boolean         @default(true)
  
  // Usage tracking
  downloadCount Int           @default(0)
  lastUsed      DateTime?
  
  // Metadata
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?       // Soft delete functionality
  createdBy   String?         // User who created this asset
  updatedBy   String?         // User who last updated this asset

  // Relationships
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@index([brandId])
  @@index([type])
  @@index([category])
  @@map("brand_assets")
}

// Color Palette model for managing brand colors
model ColorPalette {
  id          String   @id @default(cuid())
  brandId     String   // Foreign key to Brand
  name        String
  description String?
  colors      Json     // Array of color objects with hex, rgb, name, usage
  isPrimary   Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? // Soft delete functionality
  createdBy   String?  // User who created this palette
  updatedBy   String?  // User who last updated this palette

  // Relationships
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@index([brandId])
  @@map("color_palettes")
}

// Typography model for managing brand fonts and text styles
model Typography {
  id            String   @id @default(cuid())
  brandId       String   // Foreign key to Brand
  name          String
  description   String?
  fontFamily    String
  fontWeight    String?
  fontSize      String?
  lineHeight    String?
  letterSpacing String?
  usage         String?  // Where this typography should be used
  isPrimary     Boolean  @default(false)
  isActive      Boolean  @default(true)
  
  // Font file information
  fontFileUrl   String?  // URL to font file if custom
  fallbackFonts Json?    // Array of fallback fonts
  
  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime? // Soft delete functionality
  createdBy     String?  // User who created this typography
  updatedBy     String?  // User who last updated this typography

  // Relationships
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@index([brandId])
  @@map("typography")
}

// Campaign model with flexible goals and status tracking
model Campaign {
  id        String         @id @default(cuid())
  name      String
  purpose   String?        // Campaign purpose/description
  goals     Json?          // Campaign goals as JSON
  status    CampaignStatus @default(DRAFT)
  brandId   String         // Foreign key to Brand
  userId    String         // Foreign key to User
  startDate DateTime?      // Optional start date
  endDate   DateTime?      // Optional end date
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?      // Soft delete functionality
  createdBy String?        // User who created this campaign
  updatedBy String?        // User who last updated this campaign

  // Relationships
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  journeys Journey[]
  analytics Analytics[]

  @@map("campaigns")
}

// Journey model for workflow stages and automation
model Journey {
  id         String        @id @default(cuid())
  campaignId String        // Foreign key to Campaign
  stages     Json          // Journey stages as JSON array
  status     JourneyStatus @default(DRAFT)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?     // Soft delete functionality
  createdBy  String?       // User who created this journey
  updatedBy  String?       // User who last updated this journey

  // Relationships
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content  Content[]
  analytics Analytics[]

  @@map("journeys")
}

// Content model for generated content within journeys
model Content {
  id        String        @id @default(cuid())
  journeyId String        // Foreign key to Journey
  type      ContentType   // Type of content (email, social, ad, etc.)
  content   String        // The actual content text
  status    ContentStatus @default(DRAFT)
  variants  Json?         // Content variants as JSON
  metadata  Json?         // Additional metadata as JSON
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?     // Soft delete functionality
  createdBy String?       // User who created this content
  updatedBy String?       // User who last updated this content

  // Relationships
  journey Journey @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  analytics Analytics[]

  @@map("content")
}

// ContentTemplate model for reusable content templates
model ContentTemplate {
  id        String      @id @default(cuid())
  type      ContentType // Type of content this template is for
  template  String      // The template text with variables
  category  String?     // Template category for organization
  variables Json?       // Variables available in template as JSON
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?   // Soft delete functionality
  createdBy String?     // User who created this template
  updatedBy String?     // User who last updated this template

  @@map("content_templates")
}

// Analytics model for tracking campaign and content performance
model Analytics {
  id         String        @id @default(cuid())
  campaignId String        // Foreign key to Campaign
  contentId  String?       // Optional foreign key to Content
  journeyId  String?       // Optional foreign key to Journey
  eventType  EventType     // Type of analytics event
  metrics    Json          // Metrics data (impressions, CTR, engagement, conversions)
  timestamp  DateTime      @default(now())
  source     String?       // Source of the analytics data
  sessionId  String?       // Session identifier for tracking
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?     // Soft delete functionality
  createdBy  String?       // User who created this record
  updatedBy  String?       // User who last updated this record

  // Relationships
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  content  Content? @relation(fields: [contentId], references: [id], onDelete: SetNull)
  journey  Journey? @relation(fields: [journeyId], references: [id], onDelete: SetNull)

  // Indexes for efficient querying
  @@index([campaignId])
  @@index([contentId])
  @@index([journeyId])
  @@index([timestamp])
  @@index([eventType])
  @@map("analytics")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum JourneyStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  EMAIL
  SOCIAL_POST
  SOCIAL_AD
  SEARCH_AD
  BLOG_POST
  LANDING_PAGE
  VIDEO_SCRIPT
  INFOGRAPHIC
  NEWSLETTER
  PRESS_RELEASE
}

enum EventType {
  IMPRESSION
  CLICK
  OPEN
  CONVERSION
  ENGAGEMENT
  SHARE
  DOWNLOAD
  SIGNUP
  PURCHASE
  VIEW
  BOUNCE
  UNSUBSCRIBE
}

enum BrandAssetType {
  LOGO
  BRAND_MARK
  COLOR_PALETTE
  TYPOGRAPHY
  BRAND_GUIDELINES
  IMAGERY
  ICON
  PATTERN
  TEMPLATE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}
